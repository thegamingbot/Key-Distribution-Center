# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LoginForm.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import re
import sys
from pickle import loads, dumps
from socket import *

from PyQt5 import QtCore, QtWidgets
from cryptography.fernet import Fernet


class startUI(QtWidgets.QWidget):
    """Basic login form.
    """
    switch_window = QtCore.pyqtSignal(str, list, socket)

    def __init__(self, ticket):
        super().__init__()
        self.host = ticket[2]
        self.port = ticket[3]
        self.sessionKey = Fernet(ticket[4]).decrypt(ticket[1])
        self.ticket = ticket[0]
        self.client = socket(AF_INET, SOCK_STREAM)
        self.widget = QtWidgets.QWidget(self)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.line = QtWidgets.QFrame(self.widget)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.formLayout_2 = QtWidgets.QFormLayout()
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.verticalLayout = QtWidgets.QVBoxLayout(self)
        self.setupUI()

    def setupUI(self):
        self.setStyleSheet(
            """
            QPushButton {
                border-style: outset;
                border-radius: 0px;
                padding: 6px;
            }
            QPushButton:hover {
                background-color: #FF0000;
                border-style: inset;
            }
            QPushButton:pressed {
                background-color: #800000;
                border-style: inset;
            }
            """
        )

        self.verticalLayout.setContentsMargins(0, 0, 0, 0)

        self.widget.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.widget.setStyleSheet(".QWidget{background-color: rgb(0, 0, 0);}")

        self.verticalLayout_2.setContentsMargins(9, 0, 0, 0)

        self.verticalLayout_3.setContentsMargins(-1, 15, -1, -1)

        self.formLayout_2.setContentsMargins(50, 35, 59, -1)

        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.formLayout_2.setItem(0, QtWidgets.QFormLayout.SpanningRole, spacerItem)

        spacerItem_1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.formLayout_2.setItem(1, QtWidgets.QFormLayout.SpanningRole, spacerItem_1)

        self.lineEdit.setMinimumSize(QtCore.QSize(0, 40))
        self.lineEdit.setPlaceholderText("Enter your username")
        self.lineEdit.setStyleSheet("QLineEdit {\n"
                                    "color: red;\n"
                                    "font: 15pt \"Verdana\";\n"
                                    "border: None;\n"
                                    "border-bottom-color: white;\n"
                                    "border-radius: 10px;\n"
                                    "padding: 0 8px;\n"
                                    "background: rgb(0,0,0);\n"
                                    "selection-background-color: darkgray;\n"
                                    "}")
        self.lineEdit.setFocus()
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit)

        self.line.setStyleSheet("border: 2px solid white;")
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.SpanningRole, self.line)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())

        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.formLayout_2.setItem(4, QtWidgets.QFormLayout.SpanningRole, spacerItem)

        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 60))
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setStyleSheet("color: rgb(255, 255, 255);\n"
                                      "font: 17pt \"Verdana\";\n"
                                      "border: 2px solid red;\n"
                                      "padding: 5px;\n"
                                      "border-radius: 3px;\n"
                                      "opacity: 200;\n"
                                      "")
        self.pushButton.setAutoDefault(True)
        self.pushButton.clicked.connect(self.submit)
        self.formLayout_2.setWidget(5, QtWidgets.QFormLayout.SpanningRole, self.pushButton)

        self.verticalLayout_3.addLayout(self.formLayout_2)

        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem1)
        self.verticalLayout_2.addLayout(self.verticalLayout_3)

        self.horizontalLayout_3.addWidget(self.widget)
        self.horizontalLayout_3.setStretch(0, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_3)

        self.retranslateUi()
        self.sendTicket()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "Submit"))

    def submit(self):
        msg = self.lineEdit.text()
        if re.match(r'^\s*$', msg):
            return
        self.client.send(bytes(self.lineEdit.text(), "utf-8"))
        questions = loads(self.client.recv(1024))
        self.switch_window.emit(msg, questions, self.client)

    def sendTicket(self):
        self.setEnabled(False)
        self.client.connect((self.host, self.port))
        self.client.send(dumps([self.sessionKey, self.ticket]))
        verify = self.client.recv(1).decode("utf-8")
        if verify == "n":
            sys.exit()
        else:
            self.setEnabled(True)

